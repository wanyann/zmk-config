#include <dt-bindings/zmk/behaviors.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <150>;
};

&caps_word {
    continue-list = <MINUS SEMICOLON UNDERSCORE SINGLE_QUOTE LEFT_BRACKET RIGHT_BRACKET COMMA DOT GRAVE BACKSPACE DELETE>;
    mods = <(MOD_LSFT)>;
};

&sl {
    release-after-ms = <5000>;
    ignore-modifiers;
};

&sk {
    release-after-ms = <5000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_ctrl_ent {
            bindings = <&kp LC(ENTER)>;
            key-positions = <1 3>;
            require-prior-idle-ms = <50>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <2 1>;
            require-prior-idle-ms = <50>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
            require-prior-idle-ms = <70>;
            timeout-ms = <25>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <21 22>;
            require-prior-idle-ms = <50>;
        };

        combo_ru {
            bindings = <&lg_ru>;
            key-positions = <22 23>;
            require-prior-idle-ms = <50>;
        };

        combo_en {
            bindings = <&lg_en>;
            key-positions = <26 27>;
            require-prior-idle-ms = <50>;
        };

        combo_osl_sym_en {
            bindings = <&sl 9>;
            key-positions = <16 17>;
            require-prior-idle-ms = <50>;
            layers = <0 1 9>;
        };

        combo_question_en {
            bindings = <&kp QUESTION>;
            require-prior-idle-ms = <50>;
            key-positions = <3 4>;
            layers = <0 1>;
        };

        combo_quotes_en {
            bindings = <&quotes_en>;
            require-prior-idle-ms = <50>;
            key-positions = <26 28>;
            layers = <0 1>;
        };

        combo_osl_sym_ru {
            bindings = <&sl 10>;
            key-positions = <16 17>;
            require-prior-idle-ms = <50>;
            layers = <3 10 2>;
        };

        combo_question_ru {
            bindings = <&kp LS(N7)>;
            key-positions = <3 4>;
            require-prior-idle-ms = <50>;
            layers = <3 2>;
        };

        combo_quotes_ru {
            bindings = <&quotes_ru>;
            key-positions = <26 28>;
            require-prior-idle-ms = <50>;
            layers = <3 2>;
        };

        combo_braces_en {
            bindings = <&braces_en>;
            key-positions = <16 18>;
            require-prior-idle-ms = <50>;
            layers = <0 1>;
        };

        combo_yi_ru {
            bindings = <&kp Q>;
            timeout-ms = <30>;
            key-positions = <17 18>;
            layers = <2 4>;
        };

        combo_she_ru {
            bindings = <&kp I>;
            timeout-ms = <30>;
            key-positions = <27 28>;
            layers = <2 4>;
        };

        combo_scha_ru {
            bindings = <&kp O>;
            timeout-ms = <30>;
            key-positions = <7 8>;
            layers = <2 4>;
        };

        combo_yi_cw {
            bindings = <&kp LS(Q)>;
            timeout-ms = <30>;
            key-positions = <17 18>;
            layers = <3>;
        };

        combo_she_cw {
            bindings = <&kp LS(I)>;
            timeout-ms = <30>;
            key-positions = <27 28>;
            layers = <3>;
        };

        combo_scha_cw {
            bindings = <&kp LS(O)>;
            timeout-ms = <30>;
            key-positions = <7 8>;
            layers = <3>;
        };

        combo_capsword_qwerty {
            bindings = <&to 1>;
            key-positions = <11 10>;
            layers = <0 1>;
            timeout-ms = <30>;
        };

        combo_osl_fn {
            bindings = <&sl 11>;
            key-positions = <21 23>;
            require-prior-idle-ms = <50>;
        };

        combo_osl_os {
            bindings = <&sl 12>;
            key-positions = <20 21>;
            require-prior-idle-ms = <50>;
        };

        combo_capsword_diktor {
            bindings = <&to 3>;
            key-positions = <11 10>;
            layers = <3 2>;
            timeout-ms = <30>;
        };

        combo_yo_ru {
            bindings = <&kp GRAVE>;
            key-positions = <18 19>;
            layers = <2>;
            timeout-ms = <30>;
        };

        combo_yo_cw_ru {
            bindings = <&kp LS(GRAVE)>;
            key-positions = <18 19>;
            layers = <3>;
            timeout-ms = <30>;
        };

        combo_yo_en {
            bindings = <&en_yo_macro>;
            key-positions = <18 19>;
            layers = <0>;
            timeout-ms = <30>;
        };

        combo_q_en {
            bindings = <&kp Q>;
            key-positions = <3 2>;
            layers = <0>;
            timeout-ms = <30>;
        };

        combo_p_en {
            bindings = <&kp P>;
            key-positions = <7 6>;
            layers = <0>;
            timeout-ms = <30>;
        };

        combo_q_cw {
            bindings = <&kp LS(Q)>;
            key-positions = <3 2>;
            layers = <1>;
            timeout-ms = <30>;
        };

        combo_p_cw {
            bindings = <&kp LS(P)>;
            key-positions = <6 7>;
            layers = <1>;
            timeout-ms = <30>;
        };

        combo_tse_ru {
            bindings = <&kp W>;
            key-positions = <2 3>;
            layers = <2>;
            timeout-ms = <30>;
        };

        combo_tse_cw {
            bindings = <&kp LS(W)>;
            key-positions = <2 3>;
            layers = <3>;
            timeout-ms = <30>;
        };

        combo_che_ru {
            bindings = <&kp X>;
            key-positions = <6 7>;
            layers = <2>;
            timeout-ms = <30>;
        };

        combo_che_cw {
            bindings = <&kp LS(X)>;
            key-positions = <6 7>;
            layers = <3>;
            timeout-ms = <30>;
        };

        combo_os_ctrl_shift {
            bindings = <&os_ctrl_shift>;
            key-positions = <12 13>;
            require-prior-idle-ms = <70>;
            timeout-ms = <25>;
            layers = <0 2 1 3>;
        };

        parentheses {
            bindings = <&parentheses>;
            key-positions = <11 13>;
            require-prior-idle-ms = <70>;
            timeout-ms = <25>;
        };

        combo_braces_ru {
            bindings = <&braces_ru>;
            key-positions = <16 18>;
            require-prior-idle-ms = <70>;
            timeout-ms = <25>;
            layers = <2 3>;
        };

        combo_brackets_en {
            bindings = <&brackets_en>;
            key-positions = <6 8>;
            layers = <0 1>;
            timeout-ms = <30>;
        };

        combo_brackets_ru {
            bindings = <&brackets_ru>;
            key-positions = <6 8>;
            layers = <2 3>;
            timeout-ms = <30>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <13 14>;
        };

        combo_repeat {
            bindings = <&key_repeat>;
            key-positions = <5 6>;
        };

        combo_quote_ru {
            bindings = <&kp LS(NUMBER_2)>;
            key-positions = <16 15>;
            layers = <2 3>;
        };

        combo_quote_en {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <15 16>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <23 24>;
        };

        combo_exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <25 26>;
        };
    };

    macros {
        lg_ru: lg_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 2 &os_ru>;
            label = "LG_RU";
            tap-ms = <0>;
            wait-ms = <0>;
        };

        lg_en: lg_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &os_en>;
            label = "LG_EN";
            tap-ms = <0>;
            wait-ms = <0>;
        };

        os_ru: os_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(NUMBER_3))>;
            label = "OS_RU";
            tap-ms = <30>;
        };

        os_en: os_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(NUMBER_4))>;
            label = "OS_EN";
            tap-ms = <30>;
        };

        alt_tab: alt_tab {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_wait_time 50>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_wait_time 30>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "ALT_TAB";
            tap-ms = <30>;
        };

        select_row: select_row {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "SELECT_ROW";
        };

        en_code: en_code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp RETURN &kp RET>,
                <&macro_wait_time 10>,
                <&kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp UP_ARROW>;

            label = "EN_CODE_BLOCK";
        };

        en_number: en_number {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_ru>,
                <&macro_wait_time 10>,
                <&kp LS(NUMBER_3)>,
                <&macro_wait_time 10>,
                <&os_en>;

            label = "EN_NUMBER";
        };

        ru_at: ru_at {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&os_en &kp AT &os_ru>;
            label = "RU_AT";
        };

        ru_tilde: ru_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp TILDE>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_TILDE";
        };

        ru_caret: ru_cap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp CARET>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_CAP";
        };

        ru_grave: ru_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp GRAVE>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_GRAVE";
        };

        ru_code: ru_code {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp RETURN &kp RET>,
                <&macro_wait_time 10>,
                <&kp GRAVE &kp GRAVE &kp GRAVE>,
                <&macro_wait_time 10>,
                <&kp UP_ARROW>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_CODE";
        };

        ru_and: ru_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp AMPERSAND>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_AND";
        };

        ru_single_quote: ru_single_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp SINGLE_QUOTE>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_SINGLE_QUOTE";
        };

        ru_left_bracket: ru_left_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp LEFT_BRACKET>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_LEFT_BRACKET";
            tap-ms = <0>;
        };

        ru_right_bracket: ru_rt_bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp RIGHT_BRACKET>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_RT_BRACKET";
        };

        ru_left_brace: ru_left_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp LEFT_BRACE>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_LEFT_BRACE";
        };

        ru_right_brace: ru_right_brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp RIGHT_BRACE>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_RIGHT_BRACE";
        };

        ru_hash: ru_hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp HASH>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_HASH";
        };

        ru_pipe: ru_pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp HASH>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_PIPE";
        };

        ru_less: ru_less {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp LESS_THAN>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_LESS";
        };

        ru_greater: ru_greater {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp GREATER_THAN>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_GREATER";
        };

        ru_dollar: ru_dollar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_en>,
                <&macro_wait_time 10>,
                <&kp DOLLAR>,
                <&macro_wait_time 10>,
                <&os_ru>;

            label = "RU_DOLLAR";
        };

        macro_diktor_cw_off: macro_diktor_cw_off {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &to 2>;
            label = "MACRO_DIKTOR_CW_OFF";
        };

        macro_qwerty_cw_off: macro_qwerty_cw_off {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &to 0>;
            label = "MACRO_QWERTY_CW_OFF";
        };

        zeros_macro: zeros_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0 &kp N0 &kp N0 &kp N0 &kp N0>;
            label = "ZEROS_MACRO";
            tap-ms = <30>;
        };

        en_yo_macro: en_yo_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&os_ru>,
                <&macro_wait_time 10>,
                <&kp GRAVE>,
                <&macro_wait_time 10>,
                <&os_en>;

            label = "EN_YO_MACRO";
        };

        os_ctrl_shift: os_ctrl_shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LS(LCTRL) &sl 4>;
            label = "OS_CTRL_SHIFT";
            wait-ms = <0>;
        };

        ml: ml {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1 &key_on MACRO_PLACEHOLDER &layer_on 4>,
                <&macro_pause_for_release>,
                <&macro_param_1to1 &key_off MACRO_PLACEHOLDER &layer_off 4>;

            label = "Mod Layer";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        quotes_ru: dbl_quote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(NUMBER_2) &kp LS(NUMBER_2) &kp LEFT_ARROW>;
            label = "DBL_QUOTE";
        };

        quotes_en: quotes_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp DOUBLE_QUOTES &kp LEFT_ARROW>;
            label = "QUOTES_EN";
        };

        braces_en: braces_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "BRACES_EN";
        };

        braces_ru: braces_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&os_en &braces_en &os_ru>;
            label = "BRACES_RU";
        };

        brackets_en: brackets_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACKETS_EN";
        };

        brackets_ru: brackets_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&os_en &brackets_en &os_ru>;
            label = "BRACKETS_RU";
        };

        parentheses: parentheses {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT_ARROW>;
            label = "PARENTHESES";
        };

        less_greater_en: less_greater_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp GREATER_THAN &kp LEFT>;
            label = "LESS_GREATER_EN";
        };

        less_greater_ru: less_greater_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&os_en &less_greater_en &os_ru>;
            label = "LESS_GREATER_RU";
        };
    };

    behaviors {
        layer_off: layer_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "LAYER_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mod";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            require-prior-idle-ms = <20>;
        };

        hrm_slow: hrm_slow {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM for slow fingers";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <180>;
            require-prior-idle-ms = <20>;
        };

        diktor_cw_off: diktor_cw_off {
            compatible = "zmk,behavior-hold-tap";
            label = "DIKTOR_CW_OFF";
            bindings = <&mo>, <&macro_diktor_cw_off>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };

        qwerty_cw_off: qwerty_cw_off {
            compatible = "zmk,behavior-hold-tap";
            label = "QWERTY_CW_OFF";
            bindings = <&mo>, <&macro_qwerty_cw_off>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };

        hrl: hrl {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Layer";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        lt_bspc: lt_bspc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT with quick tap and mod morph";
            bindings = <&mo>, <&bspc_morph>;

            #binding-cells = <2>;
            quick-tap-ms = <180>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };

        bspc_morph: bspc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "BSPC_MORPH";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        key_on: key_on {
            compatible = "zmk,behavior-key-toggle";
            label = "KEY_ON";
            #binding-cells = <1>;
        };

        key_off: key_off {
            compatible = "zmk,behavior-key-toggle";
            label = "KEY_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "Home Row Mod Layer";
            bindings = <&ml>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
            require-prior-idle-ms = <20>;
        };

        layer_on: layer_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "LAYER_ON";
            #binding-cells = <1>;
            toggle-mode = "on";
        };

        hrml_slow: hrml_slow {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML for slow fingers";
            bindings = <&ml>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <20>;
        };

        q_morph: q_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_MORPH";
            bindings = <&kp Q>, <&bootloader>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        p_morph: p_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "P_MORPH";
            bindings = <&kp P>, <&bootloader>;

            #binding-cells = <0>;
            mods = <(MOD_RALT)>;
        };

        rt: rt {
            compatible = "zmk,behavior-hold-tap";
            label = "Repeat on Hold";
            bindings = <&key_repeat>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwerty {
            bindings = <
  &kp Q                  &mt LC(W) W            &kp E                    &mt LC(R) R    &mt LC(T) T                           &kp Y                 &kp U          &kp I      &kp O    &kp P
  &hrml_slow LEFT_GUI A  &hrml_slow LEFT_ALT S  &hrml_slow LEFT_SHIFT D  &hrml LCTRL F  &mt LC(F) G                           &kp H                 &hrml LCTRL J  &hrl 7 K   &kp L    &hrml_slow RALT SEMI
  &mt LC(Z) Z            &mt LC(X) X            &mt LC(C) C              &mt LC(V) V    &mt LG(V) B                           &kp N                 &mt SEMI M     &kp COMMA  &kp DOT  &mt LC(SLASH) SLASH
                                                                         &kp K_CANCEL   &lt 6 SPACE  &sl 8    &sk LEFT_SHIFT  &lt_bspc 7 BACKSPACE  &to 6
            >;

            label = "Qwerty";
        };

        CW_Qwerty {
            label = "CapsWord qwerty";
            bindings = <
  &kp LS(Q)                  &mt LC(W) LS(W)            &kp LS(E)                    &mt LC(R) LS(R)    &mt LC(T) LS(T)                           &kp LS(Y)  &kp LS(U)          &kp LS(I)     &kp LS(O)  &kp LS(P)
  &hrml_slow LEFT_GUI LS(A)  &hrml_slow LEFT_ALT LS(S)  &hrml_slow LEFT_SHIFT LS(D)  &hrml LCTRL LS(F)  &mt LC(F) LS(G)                           &kp LS(H)  &hrml LCTRL LS(J)  &hrl 7 LS(K)  &kp LS(L)  &hrml_slow RALT SEMI
  &mt LC(Z) LS(Z)            &mt LC(X) LS(X)            &mt LC(C) LS(C)              &mt LC(V) LS(V)    &mt LG(V) LS(B)                           &kp LS(N)  &mt SEMI M         &kp COMMA     &kp DOT    &mt LC(SLASH) SLASH
                                                                                     &to 0              &qwerty_cw_off 6 SPACE  &trans    &trans  &trans     &trans
            >;
        };

        Diktor {
            bindings = <
  &kp W                  &mt LC(W) M             &kp Z                    &mt LC(R) LS(SLASH)  &mt LC(T) SLASH                    &kp P      &kp D               &kp R     &kp L          &kp X
  &hrml_slow LEFT_GUI E  &hrml_slow LEFT_ALT B   &hrml_slow LEFT_SHIFT T  &hrml LCTRL J        &mt LC(F) F                        &kp K      &hrml LCTRL Y       &hrl 7 N  &kp C          &hrml_slow RALT H
  &mt LC(Z) A            &mt LC(X) SINGLE_QUOTE  &mt LC(C) LEFT_BRACKET   &mt LC(V) S          &mt LG(V) DOT                      &kp COMMA  &mt LS(NUMBER_4) V  &kp G     &kp SEMICOLON  &mt LC(SLASH) U
                                                                          &trans               &trans           &trans    &trans  &trans     &trans
            >;

            label = "Diktor";
        };

        CW_Diktor {
            label = "CapsWord Diktor";
            bindings = <
  &kp LS(W)                  &mt LC(W) LA(M)             &kp LS(Z)                    &mt LC(R) LS(SLASH)  &mt LC(T) SLASH                           &kp LS(P)      &kp LS(D)               &kp LS(R)     &kp LS(L)          &kp LS(X)
  &hrml_slow LEFT_GUI LS(E)  &hrml_slow LEFT_ALT LS(B)   &hrml_slow LEFT_SHIFT LS(T)  &hrml LCTRL LS(J)    &mt LC(F) LS(F)                           &kp LS(K)      &hrml LCTRL LS(Y)       &hrl 7 LS(N)  &kp LS(C)          &hrml_slow RALT LS(H)
  &mt LC(Z) LS(A)            &mt LC(X) LS(SINGLE_QUOTE)  &mt LC(C) LS(LEFT_BRACKET)   &mt LC(V) LS(S)      &mt LG(V) LS(DOT)                         &kp LS(COMMA)  &mt LS(NUMBER_4) LS(V)  &kp LS(G)     &kp LS(SEMICOLON)  &mt LC(SLASH) LS(U)
                                                                                      &to 2                &diktor_cw_off 6 SPACE  &trans    &trans  &trans         &trans
            >;
        };

        Mods {
            bindings = <
  &q_morph          &kp W             &kp E                   &kp R         &kp T                     &kp Y   &kp U         &kp I      &kp O    &p_morph
  &hrm_slow LGUI A  &hrm_slow LALT S  &hrm_slow LEFT_SHIFT D  &hrm LCTRL F  &kp G                     &kp H   &hrm LCTRL J  &hrl 7 K   &kp L    &hrm_slow RALT SEMICOLON
  &kp Z             &kp X             &kp C                   &kp V         &kp B                     &kp N   &kp M         &kp COMMA  &kp DOT  &kp SLASH
                                                              &lg_en        &trans  &trans    &trans  &trans  &trans
            >;

            label = "Mods";
        };

        Mouse {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "Mouse";
        };

        Navigation {
            bindings = <
  &none                           &kp LA(TAB)                      &kp LC(LS(LA(LG(TAB))))  &kp LS(LC(LA(LG(F1))))   &trans                          &none   &kp HOME   &kp UP    &kp END    &trans
  &hrm LEFT_GUI LC(LEFT_BRACKET)  &hrm LALT LC(RIGHT_BRACKET)      &kp LSHFT                &kp LCTRL                &zeros_macro                    &trans  &kp LEFT   &kp DOWN  &kp RIGHT  &select_row
  &mt LC(Z) LS(LG(LEFT_BRACKET))  &mt LC(X) LS(LG(RIGHT_BRACKET))  &mt LC(C) LS(F6)         &mt LC(V) LS(LC(LA(V)))  &trans                          &trans  &kp LC(T)  &none     &none      &trans
                                                                                            &trans                   &trans        &trans    &trans  &trans  &trans
            >;

            label = "Navigation";
        };

        Numbers {
            bindings = <
  &trans        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans                                  &trans  &trans     &trans      &trans        &trans
  &kp MINUS     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp EQUAL                               &trans  &kp LCTRL  &kp LSHIFT  &kp LEFT_ALT  &kp LEFT_GUI
  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH                           &trans  &trans     &trans      &trans        &trans
                                            &trans        &kp LA(SPACE)  &kp LA(ENTER)    &trans  &trans  &trans
            >;

            label = "User1";
        };

        App {
            bindings = <
  &kp LA(LC(LS(P)))  &kp LS(LA(LC(W)))  &kp LS(LA(LC(E)))  &kp LS(LA(LC(R)))      &kp LS(LA(LC(T)))                   &kp LS(LA(LC(Y)))  &kp LS(LA(LC(U)))  &kp LS(LA(LC(I)))      &kp LS(LA(LC(O)))    &kp LS(LA(LC(P)))
  &kp LS(LA(LC(A)))  &kp LS(LA(LC(S)))  &kp LS(LA(LC(D)))  &kp LS(LA(LC(F)))      &kp LS(LA(LC(G)))                   &kp LS(LA(LC(H)))  &kp LS(LA(LC(J)))  &kp LS(LA(LC(K)))      &kp LS(LA(LC(L)))    &kp LS(LA(LC(SEMICOLON)))
  &kp LS(LC(LA(Z)))  &kp LS(LA(LC(X)))  &kp LS(LA(LC(C)))  &kp LA(LS(LC(LG(V))))  &kp LS(LA(LC(B)))                   &kp LS(LA(LC(N)))  &kp LS(LC(LA(M)))  &kp LS(LA(LC(COMMA)))  &kp LS(LA(LC(DOT)))  &kp LS(LC(LA(SLASH)))
                                                           &lg_en                 &none              &sl 8    &trans  &trans             &none
            >;

            label = "User2";
        };

        EnSym {
            bindings = <
  &trans     &kp AT                &kp UNDER  &kp COLON              &kp GRAVE                    &kp SINGLE_QUOTE  &kp LEFT_BRACKET  &kp HASH       &kp RIGHT_BRACKET  &trans
  &kp TILDE  &kp LEFT_PARENTHESIS  &kp EXCL   &kp RIGHT_PARENTHESIS  &kp PLUS                     &en_number        &kp LEFT_BRACE    &kp SEMICOLON  &kp RIGHT_BRACE    &kp PIPE
  &trans     &kp ASTRK             &kp CARET  &kp PERCENT            &en_code                     &kp AMPERSAND     &kp LESS_THAN     &kp DOLLAR     &kp GREATER_THAN   &trans
                                              &to 0                  &trans     &trans    &trans  &trans            &trans
            >;

            label = "EnSym";
        };

        RuSym {
            bindings = <
  &trans     &ru_at                &kp UNDER  &kp LS(N6)   &ru_grave                    &ru_single_quote  &ru_left_bracket  &ru_hash          &ru_right_bracket  &trans
  &ru_tilde  &kp LEFT_PARENTHESIS  &kp EXCL   &kp RPAR     &kp PLUS                     &kp LS(NUMBER_3)  &ru_left_brace    &kp LS(NUMBER_4)  &ru_right_brace    &ru_pipe
  &trans     &kp ASTERISK          &ru_caret  &kp PERCENT  &ru_code                     &ru_and           &ru_less          &ru_dollar        &ru_greater        &trans
                                              &to 3        &trans     &trans    &trans  &trans            &trans
            >;
        };

        Fn {
            bindings = <
  &trans   &kp F7  &kp F8  &kp F9  &trans                     &trans  &trans     &trans          &trans    &trans
  &kp F11  &kp F4  &kp F5  &kp F6  &kp F12                    &trans  &kp LCTRL  &kp LEFT_SHIFT  &kp LALT  &kp LEFT_GUI
  &kp F10  &kp F1  &kp F2  &kp F3  &trans                     &trans  &trans     &trans          &trans    &trans
                           &lg_en  &trans   &trans    &trans  &trans  &trans
            >;
        };

        OS {
            bindings = <
  &bt BT_SEL 2  &trans         &kp LA(LC(N2))    &kp LC(LA(NUMBER_3))  &kp LC(LA(NUMBER_4))                    &trans  &trans  &trans  &trans  &bt BT_CLR
  &bt BT_SEL 0  &kp LC(RIGHT)  &kp K_PLAY_PAUSE  &kp C_VOLUME_UP       &kp C_BRI_UP                            &trans  &trans  &trans  &trans  &soft_off
  &bt BT_SEL 1  &trans         &trans            &kp C_VOL_DN          &kp C_BRI_DN                            &trans  &trans  &trans  &trans  &trans
                                                 &lg_en                &trans                &lg_en    &trans  &trans  &trans
            >;
        };

        Boot {
            bindings = <
  &bootloader  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &bootloader
  &trans       &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &sys_reset   &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &sys_reset
                               &lg_en  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
